package org.dblite.gui;

import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.dblite.database.Row;
import org.dblite.database.Table;
import org.dblite.field.Cell;
import org.dblite.field.CharField;
import org.dblite.field.DateField;
import org.dblite.field.DateIntlField;
import org.dblite.field.ImgField;
import org.dblite.field.IntegerField;
import org.dblite.field.RealField;
import org.dblite.field.RealIntlField;
import org.dblite.rmi.ReflectionManager;

/**
 * @author Andrii
 */
public class Main extends javax.swing.JFrame {

    private String dbName;
    private String dbPath;
    //    private Database database;
    private Table table;
    private ReflectionManager rf;
    boolean isSaved = true;

    public Main() {
        initComponents();
        try {
            initRMI();
        } catch (Exception e) {
            e.printStackTrace();
            jOptionPane1.showMessageDialog(null, "Can not initialize RMI connection!", "DBTMS: Change row.", 1);
        }
        setInVisible();
//        jTable1.getModel().addTableModelListener(new TableModelListener() {
//            public void tableChanged(TableModelEvent e) {
//                System.out.println(e);
//            }
//        });
    }

    private void initRMI() throws Exception {
        Registry registry = LocateRegistry.getRegistry("127.0.0.1");
        rf = (ReflectionManager) registry.lookup("dblite");
        rf.setClassDetails("org.dblite.database.DBTMSImpl");
    }

    public void setInVisible() {
        setIsVisible(false);
    }

    public void setVisible() {
        setIsVisible(true);
    }

    private void setIsVisible(boolean flag) {
        jLabel1.setVisible(flag);
        jComboBox1.setVisible(flag);
        jMenuItem3.setEnabled(flag);
        jMenuItem10.setEnabled(flag);
        jMenu3.setEnabled(flag);
        jMenu4.setEnabled(flag);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser2 = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DBTMS");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select table:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {},
                        {},
                        {},
                        {}
                },
                new String[]{

                }
        ));
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("New database");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open database");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save database");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem10.setText("Save as ..");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu4.setText("Table");

        jMenuItem5.setText("Add new table");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem9.setText("Delete table");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem7.setText("Table difference");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuItem8.setText("Table intersection");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenu2.add(jMenu4);

        jMenu3.setText("Column");

        jMenuItem6.setText("Add column");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem2.setText("Add row");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int openChoice = jFileChooser2.showOpenDialog(this);

        if (openChoice == JFileChooser.APPROVE_OPTION) {
            //Put open file code in here
            File openFile = jFileChooser2.getSelectedFile();
            dbName = openFile.getName();
            dbPath = openFile.getAbsolutePath();
//            database = new Database(dbName, dbPath);
            try {
                setDB(dbName, dbPath);
//                database.loadFromStorage();
                isSaved = true;
//                database.setIsSaved(true);
                updateComboBox();
                setVisible();
            } catch (IOException ex) {
                jOptionPane1.showMessageDialog(null, "Can not open database!", "DBTMS", 1);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void updateComboBox() throws IOException {
        ArrayList<String> tables = getListTables(dbName);

        jComboBox1.setModel(new DefaultComboBoxModel(tables.toArray()));
        if (table == null) {
            if ((tables != null) && (tables.size() > 0)) {
                table = getTable(dbName, tables.get(0));
                jComboBox1.setSelectedItem(table.getName());
            }
        } else {
            jComboBox1.setSelectedItem(table.getName());
        }
        updateTable();
    }

    //    private void setComboBox() {
//        System.out.println(table.getName());
//        jComboBox1.setSelectedItem(table.getName());
//    }
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        String str = (String) jComboBox1.getSelectedItem();
        try {
            table = getTable(dbName, str);
//            table = database.getTable(str);
            updateTable();
//            updateComboBox();
        } catch (IOException ex) {
            jOptionPane1.showMessageDialog(null, "Can not load table!", "DBTMS", 1);
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (table != null) {
            if (table.getHeader().size() > 0) {
                Row row = table.getRowSkeleton();
                //TODO 
                try {
                    addCleanRow(dbName, table.getName());
                    table = getTable(dbName, table.getName());
//                    table.addRow(row);
                    updateTable();
                } catch (IOException ex) {
                    jOptionPane1.showMessageDialog(null, "Can not add row!", "DBTMS: Add row", 1);
                }
            } else {
                jOptionPane1.showMessageDialog(null, "At first please add column .", "DBTMS: Add row", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "Can not add row!", "DBTMS: Add row", 1);
        }
        isSaved = false;
//        database.setIsSaved(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void modelListener() throws IOException {
        if (table != null) {
            TableModel model = jTable1.getModel();
            int h = table.size();
            int g = table.getColumnNames().length;
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < g; j++) {
                    try {
                        setRawValAt(dbName, table.getName(), i, j, (String) model.getValueAt(i, j));
//                        table.addValue(i, j, (String) model.getValueAt(i, j));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        jOptionPane1.showMessageDialog(null, "Can not change row!", "DBTMS: Change row.", 1);
                    }

                }
            }
            table = getTable(dbName, table.getName());
        }
    }

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        try {
            modelListener();
        } catch (Exception e) {
            jOptionPane1.showMessageDialog(null, "Some problem with connection, sorry!)", "DBTMS: Save database.", 1);
        }
//        database.setIsSaved(false);
    }//GEN-LAST:event_jTable1PropertyChange

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveDB(dbPath);
//        saveDB(database.getPath());
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void saveDB(String path) {
        isSaved = true;
        if (path == null) {
            int openChoice = jFileChooser2.showSaveDialog(this);
            if (openChoice == JFileChooser.APPROVE_OPTION) {
                path = jFileChooser2.getSelectedFile().getAbsolutePath();

            } else {
                return;
            }
        }
        try {
            dbPath = path;
            close(dbName, dbPath);
//            database.setPath(path);
//            database.saveToStorage();
            jOptionPane1.showMessageDialog(null, "Database successfully saved!", "DBTMS: Save database.", 1);
        } catch (Exception ex) {
            jOptionPane1.showMessageDialog(null, "Can not save database!", "DBTMS: Save database.", 1);
        }

    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            dbName = jOptionPane1.showInputDialog(null, "Enter database name : ", "DBMS: Create database.", 1);
            dbPath = dbName + ".dbl";
            table = null;
            setDB(dbName, dbPath);

//            database = new Database(dbName);
            this.setTitle("DBTMS: Database '" + dbName + "'");
            updateTable();
            updateComboBox();
            setVisible();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, "Can not load tables, when tables = null", ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if (dbName != null) {
            String tableName = jOptionPane1.showInputDialog(null, "Enter database name : ", "DBMS: Add new table.", 1);
            table = new Table(tableName);
            try {
                createTable(dbName, tableName);
//                database.addTable(myTable);
//                table = myTable;
                updateComboBox();
                updateTable();
            } catch (IOException ex) {
                jOptionPane1.showMessageDialog(null, "There is such table in current database!", "DBTMS", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "At first please select database!", "DBTMS", 1);
        }
        isSaved = false;
//        database.setIsSaved(false);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        if (dbName != null) {
            try {
                table = null;
                JComboBox firstDB = new JComboBox();
                firstDB.setModel(new DefaultComboBoxModel(getListTables(dbName).toArray()));
                JComboBox secondDB = new JComboBox();
                secondDB.setModel(new DefaultComboBoxModel(getListTables(dbName).toArray()));
                final JComponent[] inputs = new JComponent[]{
                        new JLabel("First database"),
                        firstDB,
                        new JLabel("Last database"),
                        secondDB
                };
                jOptionPane1.showMessageDialog(null, inputs, "DBMS", JOptionPane.PLAIN_MESSAGE);
                String db1 = (String) firstDB.getSelectedItem();
                String db2 = (String) secondDB.getSelectedItem();

                Table table = getTablesSub(dbName, db1, db2);
                updateTable(table);
            } catch (Exception ex) {
                jOptionPane1.showMessageDialog(null, "Can not execute table difference!", "DBTMS", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "At first please select database!", "DBTMS", 1);
        }


    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (dbName != null) {
            try {
                table = null;
                JComboBox firstDB = new JComboBox();
                firstDB.setModel(new DefaultComboBoxModel(getListTables(dbName).toArray()));
                JComboBox secondDB = new JComboBox();
                secondDB.setModel(new DefaultComboBoxModel(getListTables(dbName).toArray()));
                final JComponent[] inputs = new JComponent[]{
                        new JLabel("First database"),
                        firstDB,
                        new JLabel("Last database"),
                        secondDB
                };
                jOptionPane1.showMessageDialog(null, inputs, "DBMS. Table intersection.", JOptionPane.PLAIN_MESSAGE);
                String db1 = (String) firstDB.getSelectedItem();
                String db2 = (String) secondDB.getSelectedItem();
                Table table = getIntersectionTables(dbName, db1, db2);
//                table = database.getIntersectionTables(db1, db2);
                updateTable(table);
            } catch (IOException ex) {
                jOptionPane1.showMessageDialog(null, "Can not execute table intersection!", "DBTMS", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "At first please select database!", "DBTMS", 1);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        if (dbName != null) {
            try {
                JComboBox firstDB = new JComboBox();
                firstDB.setModel(new DefaultComboBoxModel(getListTables(dbName).toArray()));
                final JComponent[] inputs = new JComponent[]{
                        new JLabel("Select database"),
                        firstDB
                };
                jOptionPane1.showMessageDialog(null, inputs, "DBMS. Delete table.", JOptionPane.PLAIN_MESSAGE);
                String db1 = (String) firstDB.getSelectedItem();
                removeTable(dbName, db1);
//                database.removeTable(db1);
                table = null;
                updateComboBox();
            } catch (IOException ex) {
                jOptionPane1.showMessageDialog(null, "Can not execute table difference!", "DBTMS", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "At first please select database!", "DBTMS", 1);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (table != null) {
            JTextField textField = new JTextField();
            JComboBox type = new JComboBox();
            String[] types = new String[]{"Chars", "Integer", "Real", "RealInv", "Date", "DateInv", "Picture"};
            type.setModel(new DefaultComboBoxModel(types));
            final JComponent[] inputs = new JComponent[]{
                    new JLabel("Input column name: "),
                    textField,
                    new JLabel("Select type: "),
                    type
            };
            jOptionPane1.showMessageDialog(null, inputs, "DBMS: Add column.", JOptionPane.PLAIN_MESSAGE);
            String db1 = (String) textField.getText();
            String db2 = (String) type.getSelectedItem();
            Class<? extends Cell> classType = CharField.class;
            if (db2.equals(types[1])) {
                classType = IntegerField.class;
            }
            if (db2.equals(types[2])) {
                classType = RealField.class;
            }
            if (db2.equals(types[3])) {
                classType = RealIntlField.class;
            }
            if (db2.equals(types[4])) {
                classType = DateField.class;
            }
            if (db2.equals(types[5])) {
                classType = DateIntlField.class;
            }
            if (db2.equals(types[6])) {
                classType = ImgField.class;
            }

            try {
                addColumn(dbName, table.getName(), db1, classType);
                table = getTable(dbName, table.getName());
//                table.addColumn(db1, classType);
                updateTable();
            } catch (IOException ex) {
                jOptionPane1.showMessageDialog(null, "Can not add column!", "DBTMS", 1);
            }
        } else {
            jOptionPane1.showMessageDialog(null, "At first please select table!", "DBTMS", 1);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (dbName != null) {
            if (!isSaved) {
                int response = jOptionPane1.showConfirmDialog(null, "Do you want to save database " + dbName + "?");
                if (response == JFileChooser.APPROVE_OPTION) {
                    saveDB(dbPath);
                } else if (response == JFileChooser.CANCEL_OPTION) {
                } else {
                    return;
                }
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        saveDB(null);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void updateTable() {
        DefaultTableModel model = new DefaultTableModel(getData(), getHeader());
        jTable1.setModel(model);
    }

    private String[] getHeader() {
        if (table != null) {
            return table.getColumnNames();
        } else {
            return null;
        }
    }

    private String[][] getData() {
        if (table != null) {
            int h = table.size();
            int g = table.getColumnNames().length;
            String[][] data = new String[h][g];
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < g; j++) {
                    data[i][j] = table.getStringRow(i).getCel().get(j);
//            data[i] = (String[]) t.getStringRow(i).getCel().toArray();
                }
            }
            return data;
        } else {
            return null;
        }


    }

    private void updateTable(Table table) {
        DefaultTableModel model = new DefaultTableModel(getData(table), getHeader(table));
        jTable1.setModel(model);
    }

    private String[] getHeader(Table table) {
        if (table != null) {
            return table.getColumnNames();
        } else {
            return null;
        }
    }

    private String[][] getData(Table table) {
        if (table != null) {
            int h = table.size();
            int g = table.getColumnNames().length;
            String[][] data = new String[h][g];
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < g; j++) {
                    data[i][j] = table.getStringRow(i).getCel().get(j);
//            data[i] = (String[]) t.getStringRow(i).getCel().toArray();
                }
            }
            return data;
        } else {
            return null;
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    private ArrayList<String> getListTables(String dbName) throws RemoteException {
        rf.setMethodDetails("getListTables", String.class);
        return (ArrayList<String>) rf.invokeMethod(dbName);
    }

    private void setDB(String name, String path) throws RemoteException {
        rf.setMethodDetails("setDB", String.class, String.class);
        rf.invokeMethod(name, path);
    }


    private Table getTable(String dbName, String name) throws RemoteException {
        rf.setMethodDetails("getTable", String.class, String.class);
        return (Table) rf.invokeMethod(dbName, name);
    }


    private void createTable(String dbName, String name) throws RemoteException {
        rf.setMethodDetails("createTable", String.class, String.class);
        rf.invokeMethod(dbName, name);
    }


    private void removeTable(String dbName, String name) throws RemoteException {
        rf.setMethodDetails("removeTable", String.class, String.class);
        rf.invokeMethod(dbName, name);
    }


    private void removeRow(String dbName, String tName, int row) throws RemoteException {
        rf.setMethodDetails("removeRow", String.class, String.class, int.class);
        rf.invokeMethod(dbName, tName, row);
    }


    private Table getTablesSub(String dbName, String tName1, String tName2) throws RemoteException {
        rf.setMethodDetails("getTablesSub", String.class, String.class, String.class);
        return (Table) rf.invokeMethod(dbName, tName1, tName2);

    }


    private Table getIntersectionTables(String dbName, String tName1, String tName2) throws RemoteException {
        rf.setMethodDetails("getIntersectionTables", String.class, String.class, String.class);
        return (Table) rf.invokeMethod(dbName, tName1, tName2);
    }


    private void addColumn(String dbName, String table, String name, Class<? extends Cell> type) throws RemoteException {
        rf.setMethodDetails("addColumn", String.class, String.class, String.class, Class.class);
        rf.invokeMethod(dbName, table, name, type);

    }


    private void addCleanRow(String dbName, String tableName) throws RemoteException {
        rf.setMethodDetails("addCleanRow", String.class, String.class);
        rf.invokeMethod(dbName, tableName);
    }


    private void setRawValAt(String dbName, String tableName, int row, int col, String val) throws RemoteException {
        rf.setMethodDetails("setRawValAt", String.class, String.class, int.class, int.class, String.class);
        rf.invokeMethod(dbName, tableName, row, col, val);
    }


    private void close(String dbName, String dbPath) throws RemoteException {
        rf.setMethodDetails("close", String.class, String.class);
        rf.invokeMethod(dbName, dbPath);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
//    private static class MyTableModelListener implements TableModelListener {
//
//        public void tableChanged(TableModelEvent e) {
//            System.out.println("AAAAAAAAAAAS" + e);
////            int row = e.getFirstRow();
////            int column = e.getColumn();
////            TableModel model = (TableModel) e.getSource();
////            String columnName = model.getColumnName(column);
////            Object data = model.getValueAt(row, column);
////            System.out.println(row);
////            System.out.println(column);
////            System.out.println(data);
//
//        }
//    }
}
